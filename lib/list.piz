@i prelude/fn

%-

type List a = { `nil ⊕ List(a) a `cons };

type NE a = { List(a) a `cons };

# TODO: right now the braces are necessary
head : NE(a) -- a
     := [ { `cons⁻¹ nip } ]

tail : NE(a) -- a
     := [ { `cons⁻¹ _ } ]

foldr : [ a b -- b ] b List(a) -- b
      := [ { `nil⁻¹ nip & `cons⁻¹ [dup] dip3 [rotl] dip [[rot $] dip swap] dip foldr } ]

free : List(a) --
     := [ { `nil⁻¹ & `cons⁻¹ _ free } ]
