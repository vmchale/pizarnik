@i prelude/fn

%-

type List a = { `nil ⊕ List(a) a `cons };

type NE a = { List(a) a `cons };

# TODO: right now the braces are necessary
head : NE(a) -- a
     := [ { `cons⁻¹ nip } ]

tail : NE(a) -- a
     := [ { `cons⁻¹ _ } ]

foldr0 : [a b -- b] b a List(a) -- b List(a)
       := [ [rotl $] dip ]

# foldr1 : [a b -- b] b a `cons -- [a b -- b] b `cons
      # := [ `cons⁻¹ [dup] dip3 [rotl $] dip ]

foldr : [ a b -- b ] b List(a) -- b
      := [ { `nil⁻¹ nip & `cons⁻¹ [dup] dip3 [rotl $] dip foldr } ]

# lol infinite loop we definitely need to defer type expansion
free : List(a) --
     := [ { `nil⁻¹ & `cons⁻¹ _ free } ]
