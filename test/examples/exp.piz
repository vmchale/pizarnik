%-

type FReg = { `x0 ⊕ `x1 ⊕ `x2 ⊕ `x3 ⊕ `x4 ⊕ `x5 ⊕ `x6 ⊕ `x7 ⊕ `x8 };
type VReg = { `q0 ⊕ `q1 ⊕ `q2 ⊕ `q3 ⊕ `q4 ⊕ `q5 ⊕ `q6 ⊕ `q7 ⊕ `q8 };

# CFE FTemp Double vs. CFE F2Temp (Double, Double) etc.
type BinOp = { `add ⊕ `sub ⊕ `mult ⊕ `div };

type Fn = { `sin ⊕ `cos };

type RExp r x = { x `const ⊕ RExp(r,x) RExp (r,x) BinOp `bin };

# TODO: allow RExp variant to be declared...
type FExp = { FExp Fn `specialfn };
